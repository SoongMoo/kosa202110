<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 	
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kosaShoppingMall.mapper.GoodsMapper">
	<update id="setInquireAnswer" parameterType="goodsInquireDTO">
		update goods_inquire
		set inquire_Answer = #{inquireAnswer} ,
			answer_Date = sysdate
		where inquire_Num = #{inquireNum}
	</update>
	<resultMap type="goodsInquireDTO" id="goodsInquireAnswerResultMap">
		<id column="goods_Num" jdbcType="VARCHAR" property="goodsNum"/>
		<id column="inquire_Num" jdbcType="BIGINT" property="inquireNum"/>
		<id column="member_Num" jdbcType="VARCHAR" property="memberNum"/>
		<result column="inquire_Subject" jdbcType="VARCHAR" property="inquireSubject"/>
		<result column="inquire_Content" jdbcType="VARCHAR" property="inquireContent"/>
		<result column="inquire_Kind" jdbcType="VARCHAR" property="inquireKind"/>
		<result column="inquire_Answer" jdbcType="VARCHAR" property="inquireAnswer"/>
		<result column="inquire_Date" jdbcType="DATE" property="inquireDate"/>
		<result column="answer_Date" jdbcType="DATE" property="answerDate"/>
		<result column="answer_Email" jdbcType="VARCHAR" property="answerEmail"/>
		<association property="goodsDTO" javaType="goodsDTO" >
			<result column="goods_name" jdbcType="VARCHAR" property="goodsName"/>
		</association>
	</resultMap>
	<select id="goodsInquire" parameterType="string" resultMap="goodsInquireAnswerResultMap">
		select goods_name, INQUIRE_NUM, gi.GOODS_NUM, MEMBER_NUM, INQUIRE_SUBJECT, INQUIRE_CONTENT,
			   INQUIRE_KIND, INQUIRE_ANSWER, INQUIRE_DATE, ANSWER_DATE, ANSWER_EMAIL
		from goods g, goods_inquire gi
		where g.GOODS_NUM = gi.GOODS_NUM
		<if test="inquireNum != null">
			and INQUIRE_NUM = #{inquireNum}
		</if>
	</select>
	
	<resultMap type="goodsInquireDTO" id="goodsInquireResultMap">
		<id column="goodsNum" jdbcType="VARCHAR" property="goodsNum"/>
		<id column="inquireNum" jdbcType="BIGINT" property="inquireNum"/>
		<id column="memberNum" jdbcType="VARCHAR" property="memberNum"/>
		<result column="inquireSubject" jdbcType="VARCHAR" property="inquireSubject"/>
		<result column="inquireContent" jdbcType="VARCHAR" property="inquireContent"/>
		<result column="inquireKind" jdbcType="VARCHAR" property="inquireKind"/>
		<result column="inquireAnswer" jdbcType="VARCHAR" property="inquireAnswer"/>
		<result column="inquireDate" jdbcType="DATE" property="inquireDate"/>
		<result column="answerDate" jdbcType="DATE" property="answerDate"/>
		<result column="answerEmail" jdbcType="VARCHAR" property="answerEmail"/>
		<association property="memberDTO" javaType="memDTO" >
			<result column="memberId" jdbcType="VARCHAR" property="memberId"/>
		</association>
	</resultMap>
	<select id="goodsInquireList" parameterType="string" resultMap="goodsInquireResultMap">
		select INQUIRE_NUM inquireNum   ,
				 INQUIRE_KIND inquireKind , INQUIRE_SUBJECT  inquireSubject,
				 INQUIRE_CONTENT inquireContent,
				 INQUIRE_DATE inquireDate , m.member_id memberId,
				 INQUIRE_ANSWER inquireAnswer, ANSWER_DATE answerDate
		from goods_inquire gi , member m
   		where gi.member_num = m.member_num and gi.goods_num = #{goodsNum}
   		order by inquireNum desc
	</select>
	
	<resultMap type="reviewDTO" id="reviewResultMap">
		<id column="reviewNum"  jdbcType="BIGINT" property="reviewNum"/>
		<id column="goodsNum"  jdbcType="VARCHAR" property="goodsNum"/>
		<id column="reviewDate"  jdbcType="DATE" property="reviewDate"/>
		<result column="score"  jdbcType="BIGINT" property="score"/>
		<result column="reviewContent"  jdbcType="VARCHAR" property="reviewContent"/>
		<result column="purchaseNum"  jdbcType="VARCHAR" property="purchaseNum"/>
		<result column="memberNum"  jdbcType="VARCHAR" property="memberNum"/>
		<association property="memberDTO" javaType="memDTO" >
			<result column="memberId" jdbcType="VARCHAR" property="memberId"/>
		</association>
	</resultMap>
	
	<select id="goodsReviewList" parameterType="string" resultMap="reviewResultMap">
		    select 	review_date  reviewDate	, score , review_Content reviewContent  , m.member_id memberId
			from review r  ,  purchase  p , member m 
			where r.purchase_num = p.purchase_num and  p.member_num = m.member_num
         	  and r.goods_num =#{goodsNum}
	</select>
	
	<insert id="goodsInquireWriteService" parameterType="goodsInquireDTO">
		insert into goods_inquire (INQUIRE_NUM, inquire_kind, inquire_subject ,  
    inquire_content, member_num, inquire_date, goods_num , ANSWER_EMAIL)
	
		values (seq_num.nextval ,#{inquireKind}, 
		#{inquireSubject},  #{inquireContent}, #{memberNum}, sysdate,  #{goodsNum}, #{answerEmail})
	
	</insert>
	
	<insert id="reviewWrite" parameterType="reviewDTO">
		insert into review(REVIEW_NUM, GOODS_NUM, purchase_num, REVIEW_DATE, SCORE, REVIEW_CONTENT)
		values(seq_num.nextval, #{goodsNum}, #{purchaseNum}, sysdate, 5, #{reviewContent})
	</insert>

	<update id="goodsStatusModify" parameterType="string">
		update purchase
		set purchase_status = '상품준비중'
		where purchase_num = #{purchaseNum}
	</update>
	<delete id="deliveryDelete" parameterType="string">
		delete from delivery
		where  PURCHASE_NUM =#{purchaseNum}
	
	</delete>
	
	<update id="deliveryUpdate" parameterType="deliveryDTO">
		update delivery
		set DELIVERY_NUMBER  =#{deliveryNumber} , DELIVERY_COMPANY =#{deliveryCompany}
		where PURCHASE_NUM =#{purchaseNum}
	</update>
	
	<insert id="deliveryInsert" parameterType="kosaShoppingMall.command.DeliveryCommand">
		insert into delivery(PURCHASE_NUM,DELIVERY_NUMBER,DELIVERY_COMPANY )
		values(#{purchaseNum},#{deliveryNumber},#{deliveryCompany} )
	</insert>
	<update id="deliveryStatus" parameterType="string">
		update purchase
		set purchase_status = '배송완료'
		where purchase_num = #{purchaseNum}
	</update>
	
	<select id="purchaseEmpDetail" resultType="orderListDTO">
		select goods_name  goodsName , g.goods_Main goodsMain , g.goods_content  goodsContent , 
			   g.goods_price goodsPrice, g.delivery_cost deliveryCost, 
			     pu.purchase_num purchaseNum, pu.purchase_date purchaseDate, pu.total_price totalPrice,
                 pu.purchase_addr purchaseAddr , pu.purchase_phone purchasePhone, 
                 pu.message message, pu.recieve_name recieveName, 
                 pl.purchase_qty purchaseQty, pl.purchase_price purchasePrice, 
                 pa.payment_kind paymentKind, pa.payment_price paymentPrice, pa.payment_date paymentDate, pa.card_number cardNumber,
				 d.DELIVERY_NUMBER deliveryNumber, d.DELIVERY_COMPANY deliveryCompany
		from 	payment pa right outer join purchase pu
				on pa.purchase_num = pu.purchase_num left outer join  delivery d
				on pu.purchase_num = d.purchase_num join purchase_list pl
				on pu.purchase_num = pl.purchase_num join goods g
				on pl.goods_num = g.goods_num 
		where pu.purchase_num =#{puchaseNum}
	
	</select>
	
	<update id="statusUpdate" parameterType="string">
		update purchase
		set purchase_status = '상품준비중'
		where purchase_num = #{purchaseNum} and purchase_status = '결제완료'
	</update>
	
	<select id="purchaseList" resultType="orderListDTO" >
		select  pa.confirm_number confirmNumber , pu.purchase_num  purchaseNum
         ,pu.purchase_date  purchaseDate,   g.goods_Name  goodsName,   pu.purchase_status  purchaseStatus ,
          g.goods_main goodsMain , pu.Total_price totalPrice
         from    payment pa  right outer join purchase pu  
         on pa.purchase_num = pu.purchase_num join purchase_list pl  
         on pu.purchase_num = pl.purchase_num join goods g  
         on pl.goods_num = g.goods_num 
         order by 2 desc
	</select>
	
	<insert id="cartAdd" useGeneratedKeys="false" parameterType="cartDTO">
		MERGE into cart w
		USING (select goods_num from goods where goods_num = #{goodsNum}) g
		on (w.GOODS_num = g.GOODS_num and w.member_Num = #{memberNum})
		When MATCHED THEN
			update set w.CART_QTY = w.CART_QTY + #{cartQty}
		When NOT MATCHED THEN
			insert (w.MEMBER_NUM, w.GOODS_NUM, w.CART_QTY)
			values(#{memberNum},#{goodsNum},#{cartQty})
	</insert>
	
	<update id="wishAdd"  parameterType="wishDTO" >
		MERGE into wish w
		USING (select goods_num from goods where goods_num = #{goodsNum}) g
		on (w.GOODS_num = g.GOODS_num and w.member_Num = #{memberNum})
		When MATCHED THEN
			update set wish_date = sysdate
			delete where w.goods_num = #{goodsNum} AND w.member_Num = #{memberNum}
		When NOT MATCHED THEN
			insert (w.goods_num, w.member_Num, w.wish_date)
			values(#{goodsNum}, #{memberNum} , sysdate)
	</update>
	
	<select id="wishCount" parameterType="wishDTO" 	resultType="string">
		select count(*) from wish
		where goods_num = #{goodsNum} and member_Num = #{memberNum}
	</select>


	<select id="goodsSelect" resultType="goodsDTO" parameterType="hashMap">
		select  GOODS_NUM goodsNum , GOODS_NAME goodsName , GOODS_PRICE goodsPrice ,
		GOODS_CONTENT goodsContent , DELIVERY_COST deliveryCost, VISIT_COUNT vistCount
		,goods_main goodsMain, goods_images goodsImages, goods_Original goodsOriginal
		,goods_Main_Org goodsMainOrg
		from goods	
		<where>
			GOODS_NUM in 
			<foreach collection="goodsNums" item="goodsNum" index="index" open="(" close=")" separator="," >
				#{goodsNum}
			</foreach>
		</where>
	</select>


	<delete id="goodsDeletes" parameterType="hashMap">
		delete from goods
		<where>
		GOODS_NUM in 
		<foreach collection="cs" item="goodsNum" index="index" open="(" close=")" separator="," >
			#{goodsNum}
		</foreach>
		</where>
	</delete>
	
	<delete id="goodsRemove" parameterType="hashMap">
		delete from goods
	 	<where>
	 	GOODS_NUM in 
		<foreach collection="goodsNums" item="goodsNum" index="index" open="(" close=")" separator="," >
			#{goodsNum}
		</foreach>
		</where>
	</delete>
	
	<delete id="goodsDels" parameterType="hashMap">
		delete from goods
		<where>
		GOODS_NUM in 
		<foreach collection="deletes" item="goodsNum" index="index" open="(" close=")" separator="," >
			#{goodsNum}
		</foreach>
		</where>
	</delete>
	
	
	
	
	
	<delete id="goodsIpgoDels" parameterType="hashMap">
		delete from goodsIpgo
		<where>
		(GOODS_NUM, IPGO_DATE) in 
		<foreach collection="condition" item="nums" index="index" open="(" close=")" separator="," >
			<foreach collection="nums" item="num"  index="index" open="(" close=")" separator=",">
				#{num}
			</foreach>
		</foreach>
		</where>
	</delete>

	<resultMap type="kosaShoppingMall.domain.GoodsIpgoGoodsDTO" id="goodsIpgoGoodsMap">
		<association property="goodsDTO" javaType="goodsDTO" >
	 		<id column="GOODS_NUM" jdbcType="VARCHAR" property="goodsNum"/>
	 		<result column="GOODS_NAME" jdbcType="VARCHAR" property="goodsName"/>
	 		<result column="GOODS_PRICE" jdbcType="BIGINT" property="goodsPrice"/>
	 		<result column="GOODS_CONTENT" jdbcType="VARCHAR" property="goodsContent"/>
	 		<result column="DELIVERY_COST" jdbcType="BIGINT" property="deliveryCost"/>
	 		<result column="VISIT_COUNT" jdbcType="BIGINT" property="vistCount"/>
	 	</association>
		<association property="goodsIpgoDTO" javaType="goodsIpgoDTO" >
			<id column="GOODS_NUM" jdbcType="VARCHAR" property="goodsNum"/>
			<id column="IPGO_DATE" jdbcType="DATE" property="ipgoDate"/>
			<result column="IPGO_QTY" jdbcType="BIGINT" property="ipgoQty"/>
			<result column="MADE_DATE" jdbcType="TIMESTAMP" property="madeDate"/>
		</association>
	</resultMap>
	
	<resultMap type="goodsDTO" id="goodsIpgoGoodsResultMap">
		<id column="GOODS_NUM" jdbcType="VARCHAR" property="goodsNum"/>
	 	<result column="GOODS_NAME" jdbcType="VARCHAR" property="goodsName"/>
	 	<result column="GOODS_PRICE" jdbcType="BIGINT" property="goodsPrice"/>
	 	<result column="GOODS_CONTENT" jdbcType="VARCHAR" property="goodsContent"/>
	 	<result column="DELIVERY_COST" jdbcType="BIGINT" property="deliveryCost"/>
	 	<result column="VISIT_COUNT" jdbcType="BIGINT" property="vistCount"/>
		<association property="goodsIpgoDTO" javaType="goodsIpgoDTO" >
			<id column="GOODS_NUM" jdbcType="VARCHAR" property="goodsNum"/>
			<id column="IPGO_DATE" jdbcType="DATE" property="ipgoDate"/>
			<result column="IPGO_QTY" jdbcType="BIGINT" property="ipgoQty"/>
			<result column="MADE_DATE" jdbcType="TIMESTAMP" property="madeDate"/>
		</association>
	</resultMap>

	<delete id="goodsIpgoDelete" parameterType="kosaShoppingMall.command.GoodsCommand">
		delete from goodsIpgo 
		where GOODS_NUM = #{goodsNum} and IPGO_DATE =#{ipgoDate}
	</delete>
	
	<update id="goodsIpgoUpdate" parameterType="goodsIpgoDTO">
		 update goodsIpgo
		 set  IPGO_QTY =${ipgoQty} , MADE_DATE =#{madeDate}
		 where goods_Num = #{goodsNum} and IPGO_DATE = #{ipgoDate}
	</update>
	
	
	<select id="getGoodsIpgoInfo" parameterType="goodsIpgoDTO" 
					resultMap="goodsIpgoGoodsResultMap">
		select g.GOODS_NUM, g.GOODS_NAME, g.GOODS_PRICE, g.GOODS_CONTENT, 
				g.DELIVERY_COST, g.VISIT_COUNT,
		        i.IPGO_DATE, i.IPGO_QTY, MADE_DATE
		from goods g, goodsipgo i
		where g.GOODS_NUM = i.GOODS_NUM and g.GOODS_NUM = #{goodsNum}
										and i.IPGO_DATE=#{ipgoDate}
	</select>
	
	<select id="ipgoDetail" parameterType="goodsIpgoDTO" resultMap="goodsIpgoGoodsMap">
		select g.GOODS_NUM, g.GOODS_NAME, g.GOODS_PRICE, g.GOODS_CONTENT, 
				g.DELIVERY_COST, g.VISIT_COUNT,
		        i.IPGO_DATE, i.IPGO_QTY, MADE_DATE
		from goods g, goodsipgo i
		where g.GOODS_NUM = i.GOODS_NUM and g.GOODS_NUM = #{goodsNum}
										and i.IPGO_DATE=#{ipgoDate}
	</select>

	<select id="ipgoSelect" resultType="goodsIpgoDTO" parameterType="StartEndPageDTO">
		select * from(
			select rownum rn , IPGO_DATE ipgoDate,GOODS_NUM goodsNum ,IPGO_QTY ipgoQty,MADE_DATE madeDate
			from goodsipgo 
			order by GOODS_NUM desc, IPGO_DATE desc
			)
			where rn between #{startRow} and #{endRow}
	</select>
	<insert id="ipgoInsert" parameterType="goodsIpgoDTO">
		insert into goodsipgo(IPGO_DATE,GOODS_NUM,IPGO_QTY,MADE_DATE)
		values(#{ipgoDate},#{goodsNum},#{ipgoQty},#{madeDate})
	</insert>
	
	<select id="goodsItemCount" parameterType="string" resultType="integer" >
		select count(*) from goods
		<where>
			<if test="goodsWord != null">
				GOODS_NAME like '%'||#{goodsWord}||'%'
		   		or GOODS_CONTENT like '%'||#{goodsWord}||'%'
			</if>
		</where>
	
	</select>
	
	<select id="goodsItems" parameterType="StartEndPageDTO" resultType="goodsDTO">
		select*from(	
			select   rownum rn , GOODS_NUM goodsNum , GOODS_NAME goodsName , GOODS_PRICE goodsPrice ,
			GOODS_CONTENT goodsContent , DELIVERY_COST deliveryCost, 
			VISIT_COUNT vistCount
			from goods 
			<where>
				<if test="goodsWord !=null">
						 GOODS_NAME like '%'||#{goodsWord}||'%'
						or	GOODS_CONTENT like '%'||#{goodsWord}||'%'
				</if>
			</where>
			)
			
			where rn between #{startRow} and #{endRow}
	</select>

	<delete id="goodsDelete" parameterType="goodsDTO">
		delete from goods
		where goods_num = #{goodsNum}
	
	</delete>
	
	<select id="searchGoods" parameterType="string" resultType="goodsDTO">
		select  GOODS_NUM goodsNum , GOODS_NAME goodsName , GOODS_PRICE goodsPrice ,
		GOODS_CONTENT goodsContent , DELIVERY_COST deliveryCost, VISIT_COUNT vistCount
		from goods
		where GOODS_NAME like '%'||#{goodsWord}||'%'
		   or GOODS_CONTENT like '%'||#{goodsWord}||'%'
	</select>
	
	<update id="goodsUpdate" parameterType="goodsDTO">
		update goods
		<trim prefix="set" suffixOverrides=",">
			 GOODS_NAME = #{goodsName}, GOODS_PRICE = #{goodsPrice} ,
			 GOODS_CONTENT = #{goodsContent}, DELIVERY_COST = #{deliveryCost},
			 <if test="goodsImages != null">
			 	GOODS_IMAGES= #{goodsImages}, 
			 	GOODS_ORIGINAL = #{goodsOriginal} ,
			 </if>
			 <if test="goodsMain != null" >
				 GOODS_MAIN = #{goodsMain} , 
				 GOODS_MAIN_ORG = #{goodsMainOrg},
			 </if>
		</trim>
		where goods_num = #{goodsNum}
	</update>
	
	
	<update id="goodsVisitCnt" parameterType="string">
		update goods
		set VISIT_COUNT = visit_count+1
		where goods_num = #{goodsNum}
	
	</update>
	
	<select id="goodsSelectOne" parameterType="string" resultType="goodsDTO">
		select  GOODS_NUM goodsNum , GOODS_NAME goodsName , GOODS_PRICE goodsPrice ,
		GOODS_CONTENT goodsContent , DELIVERY_COST deliveryCost, VISIT_COUNT vistCount
		,goods_main goodsMain, goods_images goodsImages, goods_Original goodsOriginal
		,goods_Main_Org goodsMainOrg
		from goods
		where goods_num = #{goodsNum}
	</select>
	
	<select id="goodsCount" resultType="integer">
		select count(*) from goodsIpgo
	</select>
	
	<select id="count" parameterType="string" resultType="int">
		select count(*) from goods
		<where>
			<if test="goodsWord != null">
				GOODS_NAME like '%'||#{goodsWord}||'%'
		   		or GOODS_CONTENT like '%'||#{goodsWord}||'%'
			</if>
		</where>
	</select>
	
	
	
	<select id="goodsList" resultType="goodsDTO" parameterType="StartEndPageDTO">
	select *
	from (	select rownum rn,  GOODS_NUM goodsNum , GOODS_NAME goodsName , GOODS_PRICE goodsPrice ,
		GOODS_CONTENT goodsContent , DELIVERY_COST deliveryCost, VISIT_COUNT vistCount
		,goods_main goodsMain
		
		from goods
		<where>
			<if test="goodsWord != null">
				GOODS_NAME like '%'||#{goodsWord}||'%'
		   		or GOODS_CONTENT like '%'||#{goodsWord}||'%'
			</if>
		</where>
		order by goodsNum desc
	)
	
	<if test="startRow != null">
	where rn between #{startRow} and #{endRow}
	</if>
	</select>
	
	<insert id="goodsInsert" parameterType="goodsDTO"> 
		insert into goods(GOODS_NUM , GOODS_NAME , GOODS_PRICE,
						  GOODS_CONTENT, DELIVERY_COST, VISIT_COUNT
				<if test="goodsMain != null">
					,goods_Main
				</if>
				<if test="goodsImages != null">
					,goods_images
				</if>
				<if test="goodsOriginal != null">
					,goods_Original
				</if>
				<if test="goodsMainOrg != null">
					,goods_Main_Org
				</if>	  
		)
		values(#{goodsNum},#{goodsName},
		       #{goodsPrice},#{goodsContent},#{deliveryCost},0
				<if test="goodsMain != null">
					,#{goodsMain}
				</if>
				<if test="goodsImages != null">
					,#{goodsImages}
				</if>	
				<if test="goodsOriginal != null">
					,#{goodsOriginal}
				</if>
				<if test="goodsMainOrg != null">
					,#{goodsMainOrg}
				</if>
		)
	</insert>

	<select id="goodsAutoNum" resultType="string">
		select 
		concat('goods',nvl(max(substr(goods_num,6)),10000)+1)from goods	
	</select>
</mapper>